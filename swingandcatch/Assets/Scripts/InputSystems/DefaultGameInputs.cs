//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/InputSystems/DefaultGameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TheGame.Scripts.InputSystems
{
    public partial class @DefaultGameInputs : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DefaultGameInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultGameInputs"",
    ""maps"": [
        {
            ""name"": ""PlayerClimb"",
            ""id"": ""ce6e4d8d-030b-4262-a945-829adff260e4"",
            ""actions"": [
                {
                    ""name"": ""VerticalMovement"",
                    ""type"": ""Value"",
                    ""id"": ""48a9a45d-4ac9-43b3-a70b-44d0517b78d5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HorizontalMovement"",
                    ""type"": ""Value"",
                    ""id"": ""03d3ff72-e8eb-43cf-b3cf-59c0c9a4964a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JumpTransition"",
                    ""type"": ""Button"",
                    ""id"": ""ec63cbb2-eaed-4f50-ba4a-09b3757ffc7b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b47dfcb3-8d02-4290-a4f3-6f305ca105d7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpTransition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""3336ba56-8db5-4a2d-8db8-33a15b6828d7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a05a96f1-57cd-40d1-a364-f1a9cae593b3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7e738e85-4e14-4df9-b737-dc19621d800d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WS"",
                    ""id"": ""7696bf3b-7295-40a0-aff3-2efc2d372c0a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""70264b69-659d-45a1-874d-2ef8cabbaf8c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6836ea16-a38e-4db7-8170-09a5a5ebf653"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerAirMovement"",
            ""id"": ""93657d13-d97d-4fa4-8edb-fb27822ca3f9"",
            ""actions"": [
                {
                    ""name"": ""HorizontalMovement"",
                    ""type"": ""Value"",
                    ""id"": ""3174bc4a-bace-4fd8-ba34-2aafc9429a95"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""AD"",
                    ""id"": ""9f43b72f-6547-47b2-92e6-0f6ab41e262f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""205007c5-d1e8-42c4-b874-38fc2365d9fb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2e6b2de3-0185-4a1b-84dc-69d285d6204b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerGrounded"",
            ""id"": ""073f8a48-9e60-4929-9a57-fb954a989edc"",
            ""actions"": [
                {
                    ""name"": ""HorizontalMovement"",
                    ""type"": ""Value"",
                    ""id"": ""97e55b7f-6cfd-4a55-b8bb-f3ed25f64b91"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""a7f0e20e-6da3-4764-aa73-d205f01772f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JumpTransition"",
                    ""type"": ""Button"",
                    ""id"": ""4653258e-a676-450a-979f-a34b66b7f920"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d276466-a7dd-463a-a9ad-ffd25a7b76b1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpTransition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4433a70-ea5c-4b50-be89-fc2e77b79fad"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""f24b03b4-555f-4a16-835d-6c8305134ccd"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""10ab76b5-97fb-41fe-9dc6-b4bf6d9de67b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""23f35874-995d-427d-a066-80378136ea64"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerAttack"",
            ""id"": ""f6d699e4-01e1-4a77-a348-685bc262f2c1"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""c9671e7f-4e52-4669-bb27-3cc9e5fbadef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2f8dbe01-0032-4f95-a200-e472042ffdfc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InGameUI"",
            ""id"": ""271a690a-bbd2-4a0e-82f5-809da44f8d72"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""e657150e-25bb-426f-9dd0-391387e92e5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a832b4d-26d9-44e8-83cd-a9094c425a97"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PauseUI"",
            ""id"": ""b0767589-3676-4640-ae34-4d0eff7ce1c7"",
            ""actions"": [
                {
                    ""name"": ""Resume"",
                    ""type"": ""Button"",
                    ""id"": ""b4a5b356-c9ec-4ce4-aa10-7d455d09ab97"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5f11cd27-2a86-4224-b040-7265b4415d7c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Resume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerClimb
            m_PlayerClimb = asset.FindActionMap("PlayerClimb", throwIfNotFound: true);
            m_PlayerClimb_VerticalMovement = m_PlayerClimb.FindAction("VerticalMovement", throwIfNotFound: true);
            m_PlayerClimb_HorizontalMovement = m_PlayerClimb.FindAction("HorizontalMovement", throwIfNotFound: true);
            m_PlayerClimb_JumpTransition = m_PlayerClimb.FindAction("JumpTransition", throwIfNotFound: true);
            // PlayerAirMovement
            m_PlayerAirMovement = asset.FindActionMap("PlayerAirMovement", throwIfNotFound: true);
            m_PlayerAirMovement_HorizontalMovement = m_PlayerAirMovement.FindAction("HorizontalMovement", throwIfNotFound: true);
            // PlayerGrounded
            m_PlayerGrounded = asset.FindActionMap("PlayerGrounded", throwIfNotFound: true);
            m_PlayerGrounded_HorizontalMovement = m_PlayerGrounded.FindAction("HorizontalMovement", throwIfNotFound: true);
            m_PlayerGrounded_Run = m_PlayerGrounded.FindAction("Run", throwIfNotFound: true);
            m_PlayerGrounded_JumpTransition = m_PlayerGrounded.FindAction("JumpTransition", throwIfNotFound: true);
            // PlayerAttack
            m_PlayerAttack = asset.FindActionMap("PlayerAttack", throwIfNotFound: true);
            m_PlayerAttack_Attack = m_PlayerAttack.FindAction("Attack", throwIfNotFound: true);
            // InGameUI
            m_InGameUI = asset.FindActionMap("InGameUI", throwIfNotFound: true);
            m_InGameUI_Pause = m_InGameUI.FindAction("Pause", throwIfNotFound: true);
            // PauseUI
            m_PauseUI = asset.FindActionMap("PauseUI", throwIfNotFound: true);
            m_PauseUI_Resume = m_PauseUI.FindAction("Resume", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerClimb
        private readonly InputActionMap m_PlayerClimb;
        private IPlayerClimbActions m_PlayerClimbActionsCallbackInterface;
        private readonly InputAction m_PlayerClimb_VerticalMovement;
        private readonly InputAction m_PlayerClimb_HorizontalMovement;
        private readonly InputAction m_PlayerClimb_JumpTransition;
        public struct PlayerClimbActions
        {
            private @DefaultGameInputs m_Wrapper;
            public PlayerClimbActions(@DefaultGameInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @VerticalMovement => m_Wrapper.m_PlayerClimb_VerticalMovement;
            public InputAction @HorizontalMovement => m_Wrapper.m_PlayerClimb_HorizontalMovement;
            public InputAction @JumpTransition => m_Wrapper.m_PlayerClimb_JumpTransition;
            public InputActionMap Get() { return m_Wrapper.m_PlayerClimb; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerClimbActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerClimbActions instance)
            {
                if (m_Wrapper.m_PlayerClimbActionsCallbackInterface != null)
                {
                    @VerticalMovement.started -= m_Wrapper.m_PlayerClimbActionsCallbackInterface.OnVerticalMovement;
                    @VerticalMovement.performed -= m_Wrapper.m_PlayerClimbActionsCallbackInterface.OnVerticalMovement;
                    @VerticalMovement.canceled -= m_Wrapper.m_PlayerClimbActionsCallbackInterface.OnVerticalMovement;
                    @HorizontalMovement.started -= m_Wrapper.m_PlayerClimbActionsCallbackInterface.OnHorizontalMovement;
                    @HorizontalMovement.performed -= m_Wrapper.m_PlayerClimbActionsCallbackInterface.OnHorizontalMovement;
                    @HorizontalMovement.canceled -= m_Wrapper.m_PlayerClimbActionsCallbackInterface.OnHorizontalMovement;
                    @JumpTransition.started -= m_Wrapper.m_PlayerClimbActionsCallbackInterface.OnJumpTransition;
                    @JumpTransition.performed -= m_Wrapper.m_PlayerClimbActionsCallbackInterface.OnJumpTransition;
                    @JumpTransition.canceled -= m_Wrapper.m_PlayerClimbActionsCallbackInterface.OnJumpTransition;
                }
                m_Wrapper.m_PlayerClimbActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @VerticalMovement.started += instance.OnVerticalMovement;
                    @VerticalMovement.performed += instance.OnVerticalMovement;
                    @VerticalMovement.canceled += instance.OnVerticalMovement;
                    @HorizontalMovement.started += instance.OnHorizontalMovement;
                    @HorizontalMovement.performed += instance.OnHorizontalMovement;
                    @HorizontalMovement.canceled += instance.OnHorizontalMovement;
                    @JumpTransition.started += instance.OnJumpTransition;
                    @JumpTransition.performed += instance.OnJumpTransition;
                    @JumpTransition.canceled += instance.OnJumpTransition;
                }
            }
        }
        public PlayerClimbActions @PlayerClimb => new PlayerClimbActions(this);

        // PlayerAirMovement
        private readonly InputActionMap m_PlayerAirMovement;
        private IPlayerAirMovementActions m_PlayerAirMovementActionsCallbackInterface;
        private readonly InputAction m_PlayerAirMovement_HorizontalMovement;
        public struct PlayerAirMovementActions
        {
            private @DefaultGameInputs m_Wrapper;
            public PlayerAirMovementActions(@DefaultGameInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @HorizontalMovement => m_Wrapper.m_PlayerAirMovement_HorizontalMovement;
            public InputActionMap Get() { return m_Wrapper.m_PlayerAirMovement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerAirMovementActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerAirMovementActions instance)
            {
                if (m_Wrapper.m_PlayerAirMovementActionsCallbackInterface != null)
                {
                    @HorizontalMovement.started -= m_Wrapper.m_PlayerAirMovementActionsCallbackInterface.OnHorizontalMovement;
                    @HorizontalMovement.performed -= m_Wrapper.m_PlayerAirMovementActionsCallbackInterface.OnHorizontalMovement;
                    @HorizontalMovement.canceled -= m_Wrapper.m_PlayerAirMovementActionsCallbackInterface.OnHorizontalMovement;
                }
                m_Wrapper.m_PlayerAirMovementActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @HorizontalMovement.started += instance.OnHorizontalMovement;
                    @HorizontalMovement.performed += instance.OnHorizontalMovement;
                    @HorizontalMovement.canceled += instance.OnHorizontalMovement;
                }
            }
        }
        public PlayerAirMovementActions @PlayerAirMovement => new PlayerAirMovementActions(this);

        // PlayerGrounded
        private readonly InputActionMap m_PlayerGrounded;
        private IPlayerGroundedActions m_PlayerGroundedActionsCallbackInterface;
        private readonly InputAction m_PlayerGrounded_HorizontalMovement;
        private readonly InputAction m_PlayerGrounded_Run;
        private readonly InputAction m_PlayerGrounded_JumpTransition;
        public struct PlayerGroundedActions
        {
            private @DefaultGameInputs m_Wrapper;
            public PlayerGroundedActions(@DefaultGameInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @HorizontalMovement => m_Wrapper.m_PlayerGrounded_HorizontalMovement;
            public InputAction @Run => m_Wrapper.m_PlayerGrounded_Run;
            public InputAction @JumpTransition => m_Wrapper.m_PlayerGrounded_JumpTransition;
            public InputActionMap Get() { return m_Wrapper.m_PlayerGrounded; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerGroundedActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerGroundedActions instance)
            {
                if (m_Wrapper.m_PlayerGroundedActionsCallbackInterface != null)
                {
                    @HorizontalMovement.started -= m_Wrapper.m_PlayerGroundedActionsCallbackInterface.OnHorizontalMovement;
                    @HorizontalMovement.performed -= m_Wrapper.m_PlayerGroundedActionsCallbackInterface.OnHorizontalMovement;
                    @HorizontalMovement.canceled -= m_Wrapper.m_PlayerGroundedActionsCallbackInterface.OnHorizontalMovement;
                    @Run.started -= m_Wrapper.m_PlayerGroundedActionsCallbackInterface.OnRun;
                    @Run.performed -= m_Wrapper.m_PlayerGroundedActionsCallbackInterface.OnRun;
                    @Run.canceled -= m_Wrapper.m_PlayerGroundedActionsCallbackInterface.OnRun;
                    @JumpTransition.started -= m_Wrapper.m_PlayerGroundedActionsCallbackInterface.OnJumpTransition;
                    @JumpTransition.performed -= m_Wrapper.m_PlayerGroundedActionsCallbackInterface.OnJumpTransition;
                    @JumpTransition.canceled -= m_Wrapper.m_PlayerGroundedActionsCallbackInterface.OnJumpTransition;
                }
                m_Wrapper.m_PlayerGroundedActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @HorizontalMovement.started += instance.OnHorizontalMovement;
                    @HorizontalMovement.performed += instance.OnHorizontalMovement;
                    @HorizontalMovement.canceled += instance.OnHorizontalMovement;
                    @Run.started += instance.OnRun;
                    @Run.performed += instance.OnRun;
                    @Run.canceled += instance.OnRun;
                    @JumpTransition.started += instance.OnJumpTransition;
                    @JumpTransition.performed += instance.OnJumpTransition;
                    @JumpTransition.canceled += instance.OnJumpTransition;
                }
            }
        }
        public PlayerGroundedActions @PlayerGrounded => new PlayerGroundedActions(this);

        // PlayerAttack
        private readonly InputActionMap m_PlayerAttack;
        private IPlayerAttackActions m_PlayerAttackActionsCallbackInterface;
        private readonly InputAction m_PlayerAttack_Attack;
        public struct PlayerAttackActions
        {
            private @DefaultGameInputs m_Wrapper;
            public PlayerAttackActions(@DefaultGameInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Attack => m_Wrapper.m_PlayerAttack_Attack;
            public InputActionMap Get() { return m_Wrapper.m_PlayerAttack; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerAttackActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerAttackActions instance)
            {
                if (m_Wrapper.m_PlayerAttackActionsCallbackInterface != null)
                {
                    @Attack.started -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnAttack;
                }
                m_Wrapper.m_PlayerAttackActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                }
            }
        }
        public PlayerAttackActions @PlayerAttack => new PlayerAttackActions(this);

        // InGameUI
        private readonly InputActionMap m_InGameUI;
        private IInGameUIActions m_InGameUIActionsCallbackInterface;
        private readonly InputAction m_InGameUI_Pause;
        public struct InGameUIActions
        {
            private @DefaultGameInputs m_Wrapper;
            public InGameUIActions(@DefaultGameInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Pause => m_Wrapper.m_InGameUI_Pause;
            public InputActionMap Get() { return m_Wrapper.m_InGameUI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InGameUIActions set) { return set.Get(); }
            public void SetCallbacks(IInGameUIActions instance)
            {
                if (m_Wrapper.m_InGameUIActionsCallbackInterface != null)
                {
                    @Pause.started -= m_Wrapper.m_InGameUIActionsCallbackInterface.OnPause;
                    @Pause.performed -= m_Wrapper.m_InGameUIActionsCallbackInterface.OnPause;
                    @Pause.canceled -= m_Wrapper.m_InGameUIActionsCallbackInterface.OnPause;
                }
                m_Wrapper.m_InGameUIActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Pause.started += instance.OnPause;
                    @Pause.performed += instance.OnPause;
                    @Pause.canceled += instance.OnPause;
                }
            }
        }
        public InGameUIActions @InGameUI => new InGameUIActions(this);

        // PauseUI
        private readonly InputActionMap m_PauseUI;
        private IPauseUIActions m_PauseUIActionsCallbackInterface;
        private readonly InputAction m_PauseUI_Resume;
        public struct PauseUIActions
        {
            private @DefaultGameInputs m_Wrapper;
            public PauseUIActions(@DefaultGameInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Resume => m_Wrapper.m_PauseUI_Resume;
            public InputActionMap Get() { return m_Wrapper.m_PauseUI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PauseUIActions set) { return set.Get(); }
            public void SetCallbacks(IPauseUIActions instance)
            {
                if (m_Wrapper.m_PauseUIActionsCallbackInterface != null)
                {
                    @Resume.started -= m_Wrapper.m_PauseUIActionsCallbackInterface.OnResume;
                    @Resume.performed -= m_Wrapper.m_PauseUIActionsCallbackInterface.OnResume;
                    @Resume.canceled -= m_Wrapper.m_PauseUIActionsCallbackInterface.OnResume;
                }
                m_Wrapper.m_PauseUIActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Resume.started += instance.OnResume;
                    @Resume.performed += instance.OnResume;
                    @Resume.canceled += instance.OnResume;
                }
            }
        }
        public PauseUIActions @PauseUI => new PauseUIActions(this);
        public interface IPlayerClimbActions
        {
            void OnVerticalMovement(InputAction.CallbackContext context);
            void OnHorizontalMovement(InputAction.CallbackContext context);
            void OnJumpTransition(InputAction.CallbackContext context);
        }
        public interface IPlayerAirMovementActions
        {
            void OnHorizontalMovement(InputAction.CallbackContext context);
        }
        public interface IPlayerGroundedActions
        {
            void OnHorizontalMovement(InputAction.CallbackContext context);
            void OnRun(InputAction.CallbackContext context);
            void OnJumpTransition(InputAction.CallbackContext context);
        }
        public interface IPlayerAttackActions
        {
            void OnAttack(InputAction.CallbackContext context);
        }
        public interface IInGameUIActions
        {
            void OnPause(InputAction.CallbackContext context);
        }
        public interface IPauseUIActions
        {
            void OnResume(InputAction.CallbackContext context);
        }
    }
}
